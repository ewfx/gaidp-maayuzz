{
  "metadata": {
    "source": "Regulatory Rules",
    "extraction_date": "2025-03-26T01:09:13.847788",
    "rule_count": 19
  },
  "rules": [
    {
      "id": "rule_1_AmortizedCost",
      "name": "Validation for AmortizedCost",
      "description": "must fall within a specific range",
      "source_section": "UNIQUE ID",
      "fields": [
        "AmortizedCost"
      ],
      "type": "range_validation",
      "validation_code": "def validate_rule(row):\n                    if 'AmortizedCost' not in row:\n                        return False\n                        \n                    if pd.isna(row['AmortizedCost']):\n                        return False\n                        \n                    value = row['AmortizedCost']\n                    if not isinstance(value, (int, float)):\n                        return False\n                        \n                    if value < 0:\n                        return False\n                        \n                    if 'max_value' in rule and value > rule['max_value']:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_AmortizedCost_1",
      "name": "Validation for AmortizedCost",
      "description": "should be between 0 and MarketFaceValue",
      "source_section": "IDENTIFIER TYPE AND IDENTIFIER VALUE",
      "fields": [
        "AmortizedCost"
      ],
      "type": "range_validation",
      "validation_code": "def validate_rule(row):\n                    if 'AmortizedCost' not in row:\n                        return False\n                        \n                    if pd.isna(row['AmortizedCost']):\n                        return False\n                        \n                    if not isinstance(row['AmortizedCost'], (int, float)):\n                        return False\n                        \n                    market_face_value = row.get('MarketFaceValue', 0)\n                    if market_face_value <= 0:\n                        return False\n                        \n                    if row['AmortizedCost'] < 0 or row['AmortizedCost'] > market_face_value:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_AmortizedCost_2",
      "name": "Validation for AmortizedCost",
      "description": "must be within a specified range",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "AmortizedCost"
      ],
      "type": "range_validation",
      "validation_code": "def validate_rule(row):\n                    if 'AmortizedCost' not in row:\n                        return False\n                        \n                    if pd.isna(row['AmortizedCost']):\n                        return False\n                        \n                    if not isinstance(row['AmortizedCost'], (int, float)):\n                        return False\n                        \n                    if row['AccountingModel'] != 'Model1':\n                        return True # or set a default value for AmortizedCost based on the accounting model\n                        \n                    if row['AmortizedCost'] < 0 or row['AmortizedCost'] > 1000000:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_IdentifierType",
      "name": "Validation for IdentifierType",
      "description": "should be one of ['CUSIP', 'ISIN', 'SEDOL']",
      "source_section": "IDENTIFIER TYPE AND IDENTIFIER VALUE",
      "fields": [
        "IdentifierType"
      ],
      "type": "allowed_values",
      "validation_code": "def validate_rule(row):\n                    if 'IdentifierType' not in row:\n                        return False\n                        \n                    value = row.get('IdentifierType', '')\n                    if not isinstance(value, str):\n                        return False\n                        \n                    if value not in ['CUSIP', 'ISIN', 'SEDOL']:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_MarketFaceValue",
      "name": "Validation for MarketFaceValue",
      "description": "must fall within a specific range",
      "source_section": "UNIQUE ID",
      "fields": [
        "MarketFaceValue"
      ],
      "type": "range_validation",
      "validation_code": "def validate_rule(row):\n                    market_value = row.get('MarketFaceValue')\n                    if market_value is None:\n                        return False\n                        \n                    if not isinstance(market_value, (int, float)):\n                        return False\n                        \n                    if market_value < 0:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_MarketFaceValue_1",
      "name": "Validation for MarketFaceValue",
      "description": "must be greater than or equal to AmortizedCost",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "MarketFaceValue"
      ],
      "type": "cross_field",
      "validation_code": "def validate_rule(row):\n                    if 'MarketFaceValue' not in row or 'AmortizedCost' not in row:\n                        return False\n                        \n                    market_value = row.get('MarketFaceValue', None)\n                    amortized_cost = row.get('AmortizedCost', None)\n                        \n                    if pd.isna(market_value) or pd.isna(amortized_cost):\n                        return False\n                        \n                    if not isinstance(market_value, (int, float)) or not isinstance(amortized_cost, (int, float)):\n                        return False\n                        \n                    if market_value < amortized_cost:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_PrivatePlacement",
      "name": "Validation for PrivatePlacement",
      "description": "should be false",
      "source_section": "IDENTIFIER TYPE AND IDENTIFIER VALUE",
      "fields": [
        "PrivatePlacement"
      ],
      "type": "boolean_validation",
      "validation_code": "def validate_rule(row):\n                    if 'PrivatePlacement' not in row:\n                        return False\n                        \n                    if pd.isna(row['PrivatePlacement']):\n                        return False\n                        \n                    if isinstance(row['PrivatePlacement'], bool):\n                        if row['PrivatePlacement']:\n                            return False\n                    else:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_PrivatePlacement_1",
      "name": "Validation for PrivatePlacement",
      "description": "must be either true or false",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "PrivatePlacement"
      ],
      "type": "boolean_validation",
      "validation_code": "def validate_private_placement(row):\n                    if 'PrivatePlacement' not in row:\n                        return False\n                        \n                    value = row.get('PrivatePlacement')\n                    if value is not None:\n                        if not isinstance(value, bool):\n                            return False\n                            # Add error handling for missing or invalid error messages\n                            # e.g. raise ValueError(\"PrivatePlacement must be either True or False\")\n                    return True"
    },
    {
      "id": "rule_1_Security_Description_1",
      "name": "Validation for Security_Description_1",
      "description": "must not be empty",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "Security_Description_1"
      ],
      "type": "required_field",
      "validation_code": "def validate_rule(row):\n                    if 'Security_Description_1' not in row:\n                        return False\n                        \n                    if pd.isna(row['Security_Description_1']):\n                        return False\n                        \n                    if not isinstance(row['Security_Description_1'], str):\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_Security_Description_1_1",
      "name": "Validation for Security_Description_1",
      "description": "must be one of a predefined list of values",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "Security_Description_1"
      ],
      "type": "allowed_values",
      "validation_code": "def validate_rule(row):\n                    security_description = row.get('Security_Description_1')\n                    if security_description is None:\n                        return False\n                        \n                    if not isinstance(security_description, str):\n                        return False\n                        \n                    accounting_model = row.get('Accounting_Model')\n                    if accounting_model is None:\n                        return False\n                        \n                    if accounting_model not in ['Model_A', 'Model_B']:\n                        return False\n                        \n                    if accounting_model == 'Model_A':\n                        allowed_values = ['AAPL', 'GOOG', 'MSFT']\n                    elif accounting_model == 'Model_B':\n                        allowed_values = ['IBM', 'ORCL', 'INTC']\n                    else:\n                        return False\n                        \n                    if security_description not in allowed_values:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_UniqueId",
      "name": "Validation for UniqueId",
      "description": "must be present for each record",
      "source_section": "UNIQUE ID",
      "fields": [
        "UniqueId"
      ],
      "type": "required_field",
      "validation_code": "def validate_rule(row):\n                    if 'UniqueId' not in row:\n                        return False\n                        \n                    if pd.isna(row['UniqueId']):\n                        return False\n                        \n                    if not isinstance(row['UniqueId'], str):\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_UniqueId_1",
      "name": "Validation for UniqueId",
      "description": "must follow a specific format (e.g., alphanumeric, numeric, etc.)",
      "source_section": "UNIQUE ID",
      "fields": [
        "UniqueId"
      ],
      "type": "format_validation",
      "validation_code": "def validate_rule(row):\n                    if 'UniqueId' not in row:\n                        return False\n                        \n                    if pd.isna(row['UniqueId']):\n                        return False\n                        \n                    value = row['UniqueId']\n                    if not isinstance(value, str):\n                        return False\n                        \n                    if not re.match(r'^[A-Za-z0-9]+$', value):\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_UniqueId_2",
      "name": "Validation for UniqueId",
      "description": "must be unique across all records",
      "source_section": "UNIQUE ID",
      "fields": [
        "UniqueId"
      ],
      "type": "unique_value",
      "validation_code": "def validate_rule(row):\n                    if 'UniqueId' not in row:\n                        return False\n                        \n                    if pd.isna(row['UniqueId']):\n                        return False\n                        \n                    values = set()\n                    for index, record in row.iterrows():\n                        if 'UniqueId' in record:\n                            values.add(record['UniqueId'])\n                        \n                    if len(values) != len(row):\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_1_UniqueId_3",
      "name": "Validation for UniqueId",
      "description": "must remain the same from one period to the next",
      "source_section": "UNIQUE ID",
      "fields": [
        "UniqueId"
      ],
      "type": "consistency_check",
      "validation_code": "def validate_rule(row):\n                    if 'UniqueId' not in row:\n                        return False\n                        \n                    if pd.isna(row['UniqueId']):\n                        return False\n                        \n                    if not isinstance(row['UniqueId'], str):\n                        return False\n                        \n                    previous_row = row.iloc[-2:].dropna(axis=0).iloc[0] if len(row) > 1 else None\n                    if previous_row is not None and previous_row['UniqueId'] != row['UniqueId']:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_2_AmortizedCost_MarketFaceValue",
      "name": "Validation for AmortizedCost, MarketFaceValue",
      "description": "AmortizedCost must be less than or equal to MarketFaceValue",
      "source_section": "UNIQUE ID",
      "fields": [
        "AmortizedCost",
        "MarketFaceValue"
      ],
      "type": "cross_field",
      "validation_code": "def validate_rule(row):\n                    if 'AmortizedCost' not in row or 'MarketFaceValue' not in row:\n                        return False\n                        \n                    if pd.isna(row['AmortizedCost']) or pd.isna(row['MarketFaceValue']):\n                        return False\n                        \n                    if not isinstance(row['AmortizedCost'], (int, float)) or not isinstance(row['MarketFaceValue'], (int, float)):\n                        return False\n                        \n                    if row['AmortizedCost'] > row['MarketFaceValue']:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_2_IdentifierType_IdentifierValue",
      "name": "Validation for IdentifierType, IdentifierValue",
      "description": "must be present and must be from a predefined list",
      "source_section": "UNIQUE ID",
      "fields": [
        "IdentifierType",
        "IdentifierValue"
      ],
      "type": "allowed_values",
      "validation_code": "def validate_rule(row):\n                    if 'IdentifierType' not in row:\n                        return False\n                        \n                    if pd.isna(row.get('IdentifierType')):\n                        return False\n                        \n                    value = row.get('IdentifierType')\n                    if not isinstance(value, str):\n                        return False\n                        \n                    if value not in ['ISIN', 'SEDOL', 'CUSIP']:\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_2_IdentifierType_IdentifierValue_1",
      "name": "Validation for IdentifierType, IdentifierValue",
      "description": "should match a regular expression pattern for CUSIP, ISIN, or SEDOL",
      "source_section": "IDENTIFIER TYPE AND IDENTIFIER VALUE",
      "fields": [
        "IdentifierType",
        "IdentifierValue"
      ],
      "type": "format_validation",
      "validation_code": "def validate_rule(row):\n                    if 'IdentifierType' not in row:\n                        return False\n                        \n                    identifier_type = row.get('IdentifierType', None)\n                    if pd.isna(identifier_type):\n                        return False\n                        \n                    if not isinstance(identifier_type, str):\n                        return False\n                        \n                    if identifier_type not in ['CUSIP', 'ISIN', 'SEDOL']:\n                        return False\n                        \n                    identifier_value = row.get('IdentifierValue', None)\n                    if pd.isna(identifier_value):\n                        return False\n                        \n                    if not isinstance(identifier_value, str):\n                        return False\n                        \n                    pattern = {\n                        'CUSIP': r'^[0-9]{9}[0-9X]{1}[0-9]{1}[0-9A-Z]{1}[0-9A-Z0-9]{1}[0-9A-Z]{1}[0-9]{1}[0-9A-Z]{1}[0-9]{1}[0-9A-Z]{1}[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}$',\n                        'ISIN': r'^(?P<prefix>[A-Z]{2}\\d{11}|[A-Z]{12})(?P<suffix>\\d{2})$',\n                        'SEDOL': r'^\\d{10}$'\n                    }\n                    \n                    regex = pattern.get(identifier_type, None)\n                    if not regex:\n                        return False\n                        \n                    if not re.match(regex, identifier_value):\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_2_IdentifierType_IdentifierValue_2",
      "name": "Validation for IdentifierType, IdentifierValue",
      "description": "must be a valid security identifier type and value",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "IdentifierType",
        "IdentifierValue"
      ],
      "type": "format_validation",
      "validation_code": "def validate_rule(row):\n                    if 'IdentifierType' not in row:\n                        return False\n                        \n                    if pd.isna(row['IdentifierType']):\n                        return False\n                        \n                    if not isinstance(row['IdentifierType'], str):\n                        return False\n                        \n                    identifier_type = row['IdentifierType'].strip().upper()\n                    if identifier_type not in [\"CUSIP\", \"ISIN\", \"SEDOL\", \"INTERNAL\"]:\n                        return False\n                        \n                    if 'IdentifierValue' not in row:\n                        return False\n                        \n                    if pd.isna(row['IdentifierValue']):\n                        return False\n                        \n                    identifier_value = row['IdentifierValue']\n                    if not isinstance(identifier_value, str):\n                        return False\n                        \n                    return True"
    },
    {
      "id": "rule_3_Security_Description_1_Security_Description_2_Security_Description_3",
      "name": "Validation for Security_Description_1, Security_Description_2, Security_Description_3",
      "description": "must not exceed a specified length",
      "source_section": "ACCOUNTING INTENT",
      "fields": [
        "Security_Description_1",
        "Security_Description_2",
        "Security_Description_3"
      ],
      "type": "length_validation",
      "validation_code": "def validate_rule(row):\n                    if not ('Security_Description_1' in row and 'Security_Description_2' in row and 'Security_Description_3' in row):\n                        return False\n                        \n                    max_length = 50 if row.get('Accounting_Model') == 'Model_A' else 75\n                        \n                    if (len(row['Security_Description_1'].get('Value', '')) > max_length or\n                        len(row['Security_Description_2'].get('Value', '')) > max_length or\n                        len(row['Security_Description_3'].get('Value', '')) > max_length):\n                        return False\n                        \n                    return True"
    }
  ]
}